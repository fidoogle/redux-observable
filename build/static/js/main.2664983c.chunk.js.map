{"version":3,"sources":["stores/store.js","components/search.js","services/accounts.js","components/doughnut.js","components/status.js","components/tile.js","components/card-skeleton.js","components/type.js","components/grid-view.js","components/tiles.js","components/nav-header.js","components/nav-bar.js","components/nav.js","components/page-titles.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["StoreContext","React","createContext","Search","useState","amountAscending","setAmountAscending","streetAscending","setStreetAscending","selectedType","setSelectedType","useContext","globalProperties","setGlobalProperties","globalPropertiesIntact","dataApp","setDataApp","filterByType","e","target","value","temp","filter","o","type","viewAs","view","stopPropagation","className","onClick","sort","a","b","balance","err","sortAmount","fontSize","style","color","orange","streetA","address","toUpperCase","split","streetB","sortStreet","name","checked","onChange","placeholder","sleep","t","Math","random","Promise","resolve","setTimeout","randomError","floor","legend","display","options","cutoutPercentage","Component","data","width","Status","status","result","toLowerCase","getStatusClassNames","Tile","property","setBalance","balanceError","setBalanceError","refreshThis","setRefreshThis","useLayoutEffect","async","id","delay","url","axios","method","response","Error","find","console","error","fetchBalance","then","p","randomScalingFactor","round","labels","datasets","backgroundColor","hoverBackgroundColor","Tooltip","title","red","Skeleton","variant","height","grey","CardSkeleton","Type","GridView","properties","length","map","index","key","Tiles","props","setGlobalPropertiesIntact","setProperties","propertiesError","setPropertiesError","useEffect","headers","fetchProperties","Array","from","CircularProgress","size","NavHeader","src","alt","NavBar","Nav","PageTitle","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","children","accountNumbers","accountProperties","appState","oneChart","oneOverlay","selectedAccount","globalFunctions","exampleGlobalFunction","ascending","app","setApp","email","user","setUser","accounts","setAccounts","propertiesIntact","setPropertiesIntact","store","appInfo","userInfo","accountInfo","propertyInfo","propertyInfoIntact","appFunctions","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2664983c.chunk.js","sourcesContent":["//https://dev.to/nazmifeeroz/using-usecontext-and-usestate-hooks-as-a-store-mnm\r\n\r\nimport React from 'react'\r\n\r\n\r\nexport const StoreContext = React.createContext(null)\r\n\r\n\r\nexport default ({ children }) => {\r\n\r\n    //INITIAL DATA can be gathered from asynch request\r\n    const accountNumbers = ['11111', '22222', '33333']\r\n    const accountProperties = []\r\n    const userProfile = {\r\n        name: 'Pedro Smith',\r\n        email: 'pedrosmith@gmail.com'\r\n    }\r\n    const appState = {\r\n        oneChart: null,\r\n        oneOverlay: null,\r\n        selectedAccount: accountNumbers[0], //can be set to first accountNumber after they load\r\n        viewAs: 'tiles',\r\n    }\r\n\r\n    // Global Functions\r\n    const exampleGlobalFunction = (ascending) => {\r\n        // \r\n    };\r\n    const globalFunctions = {\r\n        exampleGlobalFunction\r\n    }\r\n\r\n    const [app, setApp] = React.useState(appState)\r\n    const [user, setUser] = React.useState(userProfile)\r\n    const [accounts, setAccounts] = React.useState(accountNumbers)\r\n    const [properties, setProperties] = React.useState(accountProperties)\r\n    const [propertiesIntact, setPropertiesIntact] = React.useState(accountProperties)\r\n    const [appFunctions, setAppFunctions] = React.useState(globalFunctions)\r\n\r\n    const store = {\r\n        appInfo: [app, setApp],\r\n        userInfo: [user, setUser],\r\n        accountInfo: [accounts, setAccounts],\r\n        propertyInfo: [properties, setProperties],\r\n        propertyInfoIntact: [propertiesIntact, setPropertiesIntact],\r\n        appFunctions: [appFunctions, setAppFunctions],\r\n    }\r\n\r\n    return <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport { StoreContext } from '../stores/store'\r\n\r\nimport SortIcon from '@material-ui/icons/Sort'\r\nimport orange from '@material-ui/core/colors/orange'\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\n\r\n\r\nconst Search = () => {\r\n    const [amountAscending, setAmountAscending] = useState(false);\r\n    const [streetAscending, setStreetAscending] = useState(false);\r\n    const [selectedType, setSelectedType] = useState('all');\r\n    const { ['propertyInfo']: [globalProperties, setGlobalProperties] } = useContext(StoreContext);\r\n    const { ['propertyInfoIntact']: [globalPropertiesIntact, setGlobalPropertiesIntact] } = useContext(StoreContext); //original global data\r\n    const { ['appInfo']: [dataApp, setDataApp] } = useContext(StoreContext);\r\n\r\n    const filterByType = (e) => {\r\n        setSelectedType(e.target.value)\r\n        let temp = [...globalPropertiesIntact] //clone, avoids mutating state directly, always start with original data\r\n        setGlobalProperties(\r\n            temp.filter(o => {\r\n                if (e.target.value==='all') return true;\r\n                return (o.type===e.target.value);\r\n            })\r\n        )\r\n    }\r\n    const sortAmount = (e) => {\r\n        e.stopPropagation()\r\n        let temp = [...globalProperties] //clone, avoids mutating state directly\r\n        if (amountAscending) {\r\n            temp.sort((a, b) => {\r\n                try {\r\n                    return a.balance - b.balance\r\n                } catch(err) {\r\n                    return 0\r\n                }\r\n            });\r\n        } else {\r\n            temp.sort((a, b) => {\r\n                try {\r\n                    return b.balance - a.balance\r\n                } catch(err) {\r\n                    return 0\r\n                }\r\n            });\r\n        }\r\n        setGlobalProperties(temp)\r\n        setAmountAscending(!amountAscending)\r\n    }\r\n    const sortStreet = (e) => {\r\n        e.stopPropagation()\r\n        let temp = [...globalProperties] //clone, avoids mutating state directly\r\n        if (streetAscending) { \r\n            temp.sort((a, b) => {\r\n                try {\r\n                    const streetA = a.address.toUpperCase().split(' ')[1]\r\n                    const streetB = b.address.toUpperCase().split(' ')[1]\r\n                    if (streetA > streetB) { return 1 }\r\n                    else if (streetA < streetB) { return -1 }\r\n                    return 0\r\n                } catch(err) {\r\n                    return 0\r\n                }\r\n            });\r\n        } else {\r\n            temp.sort((a, b) => {\r\n                try {\r\n                    const streetA = a.address.toUpperCase().split(' ')[1]\r\n                    const streetB = b.address.toUpperCase().split(' ')[1]\r\n                    if (streetA > streetB) { return -1 }\r\n                    else if (streetA < streetB) { return 1 }\r\n                    return 0\r\n                } catch(err) {\r\n                    return 0\r\n                }\r\n            });\r\n        }\r\n        setGlobalProperties(temp)\r\n        setStreetAscending(!streetAscending)\r\n    }\r\n    const viewAs = (e, view) => {\r\n        e.stopPropagation()\r\n        setDataApp({...dataApp, viewAs: view})\r\n    }\r\n\r\n    return (\r\n        <form>\r\n        <div className=\"search\">\r\n            <div className=\"content-max search-border\">\r\n                <div className=\"search-option\">\r\n                    <div className=\"search-top\">\r\n                        Search by:\r\n                    </div>\r\n                    <div className=\"search-bottom\">\r\n                        <div>Sort</div>\r\n                        <div className=\"search-row\">\r\n                            <div onClick={(e) => {sortAmount(e)}} className=\"search-row sort\">\r\n                                Amount &nbsp;<SortIcon fontSize=\"small\" style={{ color: orange[700] }}/>\r\n                            </div>\r\n                            <div className=\"spacer\">&nbsp;</div>\r\n                            <div onClick={(e) => {sortStreet(e)}} className=\"search-row sort\">\r\n                                Street Name &nbsp;<SortIcon fontSize=\"small\" style={{ color: orange[700] }}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"search-option\">\r\n                    <div className=\"search-top\">\r\n                        &nbsp;\r\n                    </div>\r\n                    <div className=\"search-bottom\">\r\n                        <div>Type</div>\r\n                        <div className=\"search-row\">\r\n                        <div className=\"search-row\">\r\n                                <input \r\n                                    name=\"type\" \r\n                                    type=\"radio\" \r\n                                    value=\"checking\"\r\n                                    checked={selectedType==='checking'}\r\n                                    onChange={filterByType}\r\n                                />Checking\r\n                            </div>\r\n                            <div className=\"spacer\">&nbsp;</div>\r\n                            <div className=\"search-row\">\r\n                                <input \r\n                                    name=\"type\" \r\n                                    type=\"radio\" \r\n                                    value=\"creditcard\"\r\n                                    checked={selectedType==='creditcard'}\r\n                                    onChange={filterByType}\r\n                                />Credit Card\r\n                            </div>\r\n                            <div className=\"spacer\">&nbsp;</div>\r\n                            <div className=\"search-row\">\r\n                                <input \r\n                                    name=\"type\" \r\n                                    type=\"radio\" \r\n                                    value=\"all\"\r\n                                    checked={selectedType==='all'}\r\n                                    onChange={filterByType}\r\n                                />All\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"search-option\">\r\n                    <div className=\"search-top\">\r\n                        &nbsp;\r\n                    </div>\r\n                    <div className=\"search-bottom\">\r\n                        <div>Amount</div>\r\n                        <div className=\"search-row\">\r\n                            <input type=\"text\" placeholder=\"$\"/> to &nbsp; &nbsp;<input type=\"text\" placeholder=\"$\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"search-option\">\r\n                    <div className=\"search-top\">\r\n                        <div>&nbsp;</div>\r\n                        <div className=\"flex-css\">\r\n                            <div className=\"flex-css pointer\" \r\n                                onClick={(e) => {viewAs(e, 'tiles')}} \r\n                                style={{ color: (dataApp.viewAs==='tiles')? orange[700]:''}}>\r\n                                <AppsIcon /> Tile View&nbsp;&nbsp;&nbsp;\r\n                            </div>\r\n                            <div className=\"flex-css pointer\" \r\n                                onClick={(e) => {viewAs(e, 'grid')}} \r\n                                style={{ color: (dataApp.viewAs==='grid')? orange[700]:''}}>\r\n                                <ListIcon /> Grid View\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"search-bottom\">\r\n                        <div>Status</div>\r\n                        <div className=\"search-row\">\r\n                            <div className=\"search-row\"><input type=\"checkbox\"/>Received</div>\r\n                            <div className=\"spacer\">&nbsp;</div>\r\n                            <div className=\"search-row\"><input type=\"checkbox\"/>Pending</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Search;","import axios from 'axios';\r\n\r\nconst MIN_FETCH_TIME = 2500;\r\nfunction sleep(t = MIN_FETCH_TIME) {\r\n    t = Math.random() * t + MIN_FETCH_TIME\r\n    return new Promise(resolve => setTimeout(resolve, t))\r\n}\r\nfunction randomError() {\r\n    const rnd = Math.floor(Math.random() * 10); // integer between 0 and 9\r\n    return (rnd%5===0)\r\n}\r\n\r\nconst fetchBalance = async (id=0, delay=false) => {\r\n    const url = './data/properties.json';\r\n    try {\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: url\r\n        });\r\n        if (delay) {\r\n            await sleep();\r\n        }\r\n        if (randomError()) {\r\n            throw new Error('Random error');\r\n        }\r\n        const result = response.data.find(o => o.id === id)\r\n        return result.balance; // if null, throw error in catch\r\n    } catch(e) {\r\n        console.error('Request for fetchBalance failed');\r\n        throw e;\r\n    }\r\n};\r\n\r\nconst fetchProperties = async (delay=false) => {\r\n    const url = './data/properties.json';\r\n    //const url = 'https://dev-api-assetmanagemnt-workerhost.azure.saws.org/account/api/gallons/3463463';\r\n    try {\r\n        const response = await axios({\r\n            method: 'get',\r\n            url: url,\r\n            headers: {\r\n                'Ocp-Apim-Trace': true,\r\n                'Ocp-Apim-Subscription-Key': 'd334acadb84d48b39eca45d2bd4119ef'\r\n            }\r\n        });\r\n        if (delay) {\r\n            await sleep();\r\n        }\r\n        return response.data;\r\n    } catch(e) {\r\n        console.error('Request for fetchProperties failed');\r\n        throw e;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport { fetchBalance, fetchProperties }","import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nconst legend = {\r\n    display: false\r\n}\r\nconst options = {\r\n    cutoutPercentage: 90\r\n}\r\n\r\nconst Component = ({data}) => {\r\n    return (\r\n        <div>\r\n            <Doughnut data={data} legend={legend} options={options} width={140}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Component;","import React from 'react';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport PriorityHighIcon from '@material-ui/icons/PriorityHigh';\r\n\r\nconst Status = ({status}) => {\r\n    const getStatusClassNames = () => {\r\n        let result = 'status flex-css ';\r\n        try {\r\n            result += status.toLowerCase()\r\n        } catch(e) {}\r\n        return result;\r\n    }\r\n    const getStatusIcon = () => {\r\n        if (status==='Issue') return <PriorityHighIcon fontSize=\"small\"/>\r\n        if (status==='Pending') return <CachedIcon fontSize=\"small\"/>\r\n        return <CheckIcon fontSize=\"small\"/>\r\n    }\r\n\r\n    return (\r\n        <div className={getStatusClassNames()}>\r\n            {getStatusIcon()}\r\n            <div>{status}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Status;","import React, { useContext, useLayoutEffect, useState } from 'react'\r\nimport {fetchBalance} from '../services/accounts'\r\nimport Doughnut from './doughnut'\r\nimport Status from './status'\r\n\r\n//Material UI\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\n//Material Colors\r\nimport green from '@material-ui/core/colors/green';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport lightBlue from '@material-ui/core/colors/lightBlue';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport red from '@material-ui/core/colors/red';\r\n\r\n\r\nfunction Tile({property}) {\r\n    const [balance, setBalance] = useState(null);\r\n    const [balanceError, setBalanceError] = useState(null);\r\n    const [refreshThis, setRefreshThis] = useState(null);\r\n\r\n    useLayoutEffect(() => {\r\n        setBalanceError(null)\r\n        fetchBalance(property.id, true).then(\r\n            p => {setBalance(p)}, // TODO merge into global properties store\r\n            e => {setBalanceError(e)}\r\n        )\r\n    }, [refreshThis]);\r\n\r\n    var randomScalingFactor = function() {\r\n        return Math.round(Math.random() * 100);\r\n    };\r\n    const data = {\r\n        labels: [\r\n            'Water',\r\n            'Sewer',\r\n            'Fees'\r\n        ],\r\n        datasets: [{\r\n            data: [randomScalingFactor(), randomScalingFactor(), randomScalingFactor()],\r\n            backgroundColor: [\r\n            '#0e7bb3',\r\n            '#379932',\r\n            '#e68a47'\r\n            ],\r\n            hoverBackgroundColor: [\r\n            '#3d7ee6',\r\n            '#33e621',\r\n            '#efae0e'\r\n            ]\r\n        }]\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex-card\">\r\n                <div className=\"flex-card-column clip\">\r\n                    <div className=\"account clip\">Account #: 300104859-1938391-8238</div>\r\n                    <div className=\"address\">{property.address}</div>\r\n                    <div className=\"balance clip\">\r\n                        {\r\n                            balanceError ?\r\n                                <div className=\"retry\" onClick={(e) => setRefreshThis(Math.random)}>\r\n                                <Tooltip title=\"Failed to load. Click to retry.\">\r\n                                    <span>\r\n                                        <WarningIcon fontSize=\"small\" style={{ color: red[500] }}/>\r\n                                        <CachedIcon/> Retry\r\n                                    </span>\r\n                                </Tooltip>\r\n                                </div>\r\n                            :\r\n                                (balance ?\r\n                                    '$'+balance+' Due'\r\n                                : \r\n                                    <Skeleton variant=\"rect\" width={200} height={44}/>\r\n                                )\r\n                        }\r\n                    </div>\r\n                    <div className=\"legend\" style={{height: 66}}>\r\n                        {/* <div><FiberManualRecordIcon fontSize=\"small\" style={{ color: lightBlue[800] }}/> Water</div>\r\n                        <div><FiberManualRecordIcon fontSize=\"small\" style={{ color: green[600] }}/> Sewer</div>\r\n                        <div><FiberManualRecordIcon fontSize=\"small\" style={{ color: orange[700] }}/> Fees</div> */}\r\n                    </div>\r\n                    <div className=\"confirmation\">\r\n                        Confirmation #: 7577471\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex-card-column right clip\">\r\n                    <div><MoreHorizIcon style={{ color: grey[400] }}/></div>\r\n                    <div className=\"chart\">\r\n                        <div className=\"doughnut-middle\">\r\n                            {10*randomScalingFactor()}\r\n                            <div className=\"bottom\">Gallons Used<br/>This Month</div>\r\n                        </div>\r\n                        <Doughnut data={data}/>\r\n                    </div>\r\n                    <Status status={property.status}/>\r\n                </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tile;","import React from 'react';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nconst CardSkeleton = () => {\r\n    return (\r\n        <>\r\n            <div className=\"flex-card-column clip\">\r\n                <Skeleton width={170}/>\r\n                <Skeleton variant=\"rect\" width={130} height={22}/>\r\n                <div className=\"balance clip\">\r\n                    <Skeleton variant=\"rect\" width={200} height={44}/>\r\n                </div>\r\n                <div className=\"legend\">\r\n                    <Skeleton variant=\"rect\" width={80} height={74} />\r\n                </div>\r\n                <div className=\"confirmation\">\r\n                    <Skeleton width={120}/>\r\n                </div>\r\n            </div>\r\n            <div className=\"flex-card-column right clip\">\r\n                <div><Skeleton width=\"20px\" /></div>\r\n                <div className=\"chart\">\r\n                    <Skeleton variant=\"circle\" width={140} height={140}/>\r\n                </div>\r\n                <div>\r\n                    <Skeleton width=\"60px\" height={24}/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CardSkeleton;","import React from 'react';\r\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\r\nimport CreditCardIcon from '@material-ui/icons/CreditCard';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nconst Type = ({type}) => {\r\n    return (\r\n        <div>\r\n            {type==='creditcard' && \r\n                <Tooltip title=\"Credit Card\">\r\n                    <span>\r\n                        <CreditCardIcon fontSize=\"small\"/>\r\n                    </span>\r\n                </Tooltip>\r\n            }\r\n            \r\n            {type==='checking' && \r\n                <Tooltip title=\"Checking\">\r\n                    <span>\r\n                        <AccountBalanceIcon fontSize=\"small\"/>\r\n                    </span>\r\n                </Tooltip>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Type;","import React from 'react';\r\nimport Status from './status'\r\nimport Type from './type'\r\nimport FlipMove from 'react-flip-move';\r\n\r\n\r\nconst GridView = ({properties}) => {\r\n    return (\r\n        <>\r\n            <div className=\"flex-css\">\r\n                <div className=\"content-max\">\r\n                <div className=\"grid-row header\">\r\n                        <div></div>\r\n                        <div>Name</div>\r\n                        <div>Address</div>\r\n                        <div>Balance</div>\r\n                        <div>Status</div>\r\n                        <div>Type</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <FlipMove>\r\n            {properties.length &&\r\n                properties.map((o, index) => \r\n                    <div className=\"flex-css\" key={o.id}>\r\n                        <div className=\"content-max\">\r\n                        <div className={`grid-row ${(index%2===0) ? \"even\" : \"\"}`}>\r\n                                <div>{index}</div>\r\n                                <div>{o.name}</div>\r\n                                <div>{o.address}</div>\r\n                                <div>{o.balance}</div>\r\n                                <div><Status status={o.status}/></div>\r\n                                <div><Type type={o.type}/></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </FlipMove>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GridView;","import React, { useContext, useEffect, useLayoutEffect, useRef, useState } from 'react';\r\nimport { StoreContext } from '../stores/store'\r\nimport FlipMove from 'react-flip-move';\r\nimport Tile from './tile'\r\nimport {fetchProperties} from '../services/accounts'\r\nimport CardSkeleton from './card-skeleton';\r\nimport GridView from './grid-view'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\n\r\nconst Tiles = (props) => {\r\n    const { ['appInfo']: [dataApp, setDataApp] } = useContext(StoreContext);\r\n    const { ['propertyInfo']: [globalProperties, setGlobalProperties] } = useContext(StoreContext); //global\r\n    const { ['propertyInfoIntact']: [globalPropertiesIntact, setGlobalPropertiesIntact] } = useContext(StoreContext); //original global data\r\n    const [properties, setProperties] = useState([]); //local\r\n    const [propertiesError, setPropertiesError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (!globalPropertiesIntact.length) {\r\n            fetchProperties(true).then(\r\n                p => {setGlobalProperties(p); setGlobalPropertiesIntact(p)},\r\n                e => {setPropertiesError(e)}\r\n            )\r\n        }\r\n        setProperties(globalProperties)\r\n    }, [globalProperties]);\r\n\r\n    return (\r\n        <>\r\n        <div className=\"flex-css\">\r\n            <div className=\"content-max\">\r\n                {dataApp.viewAs==='tiles' &&\r\n                    <FlipMove className=\"flex-card-container\">\r\n                        {\r\n                            propertiesError ?\r\n                                <div>There is an error</div>\r\n                            :\r\n                            properties.length ?\r\n                            properties.map((o) => \r\n                                <div key={o.id}>\r\n                                    <Tile property={o} key={o.id}/>\r\n                                </div>\r\n                            )\r\n                            : \r\n                            Array.from(new Array(20)).map((o, index) => \r\n                            <div className=\"flex-card\" key={index}>\r\n                                <CardSkeleton key={index}/>\r\n                            </div>\r\n                            )\r\n                        }\r\n                    </FlipMove>\r\n                }\r\n            </div>\r\n        </div>\r\n        {dataApp.viewAs==='grid' && (\r\n            propertiesError ?\r\n                <div>There is an error</div>\r\n            :\r\n            properties.length ?\r\n                <GridView properties={properties}/>\r\n            :\r\n                <div className=\"flex-css\">\r\n                    <CircularProgress size={40}/>\r\n                </div>\r\n        )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Tiles;","import React from 'react';\r\n\r\nconst NavHeader = () => {\r\n    return (\r\n        <div className=\"nav-header\">\r\n            <div className=\"content-max\">\r\n                <div><img src=\"./logo-saws.png\" alt=\"sawslogo\" /></div>\r\n                <div className=\"title\">My Commercial Account</div>\r\n                <div className=\"need-help flex-css\">Need Help?</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavHeader;","import React from 'react';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <div className=\"nav-bar\">\r\n            <div className=\"content-max\">\r\n                <div className=\"nav-links\">\r\n                    <div>Overview</div>\r\n                    <div>Usage</div>\r\n                    <div>History</div>\r\n                    <div>Move In/Out</div>\r\n                    <div>Payment</div>\r\n                    <div className=\"last-link\">Contact Us</div>\r\n                    <div className=\"settings\">\r\n                        <SettingsIcon fontSize=\"large\"/>\r\n                        <div>&nbsp;Settings</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport NavHeader from './nav-header'\r\nimport NavBar from './nav-bar'\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <>\r\n            <NavHeader/>\r\n            <NavBar/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\nconst PageTitle = () => {\r\n    return (\r\n        <div className=\"page-titles\">\r\n            <div className=\"content-max\">\r\n                <div className=\"title\">\r\n                    Overview\r\n                    <div className=\"subtitle\">\r\n                        Expand and see more information about an account below.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageTitle;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div><img src=\"./logo-saws-grey.png\" alt=\"sawslogogrey\" /></div>\r\n            <div>Lorem ipsum dolor sit amet consectetur adipiscing elit aliquam eget nullam pellentesque </div>\r\n            <div>aliquam curabitur cociis.</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Search from './components/search'\r\nimport Tiles from './components/tiles'\r\nimport Nav from './components/nav'\r\nimport PageTitles from './components/page-titles'\r\nimport Footer from './components/footer'\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <>\r\n      <Nav/>\r\n      <PageTitles/>\r\n      <Search/>\r\n      <Tiles/>\r\n      <Footer/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport StoreProvider from './stores/store'\r\n\r\nReactDOM.render(<StoreProvider><App /></StoreProvider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}